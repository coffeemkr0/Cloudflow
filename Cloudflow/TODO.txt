Create a view of what the agent is actually doing to expand on the Running status.

Add the ability to download an agent - the setup program actually has to be ran first
	before you can add an agent to the web app so that you can know what port to enter
Add the ability to test the connection to an agent while adding it to the web app
	Perhaps use the Start Listening button on the Setup program to make this work
Allow jobs, triggers and steps to perform impersonation
	Check out the Options on Tfs builds - Allow Scripts to Access OAuth Token

Sign everything so that it is trusted
Make it so that runs have a configurable name format that is generated when the run starts (similar to Tfs builds)

Use a ViewModel for agent configurations instead of using the model directly from the Core assembly

Triggers starting other triggers:
	For example, a trigger that watches for folders being created in a watch folder
	This trigger being fired Starts another trigger that watches for files that are created in the new folder
	This file watcher trigger getting fired starts a run
	This sounds like having dynamically created triggers

Trigger examples:
	Watch folder
	Monitor an email account
	A WCF or SignalR service that listens for Http requests
	Poll a database
	Fire an event from Sql Server that fires the trigger (not polling)

Add an option to steps for continuing after errors
Keep a history of runs and their logs and status etc.
start making methods extensible
Enable the agent to run as a windows server
Authenitcaiton - create a user account and only access "my stuff"




Ability to setup "jobs" - Jobs being the settings that are required for the agent to know what to do:
	1. Input folder that contains the jpegs
	2. Output folder to place the pdfs



